var app = angular.module('myApp', []);
app.controller('myCtrl', function($scope) {

	$scope.score = 0;
	$scope.target = 0;

	// models
	var models = {
		1 : [
				[156,75,92,99,103,113,71,73,123,58],
				[64,17,159],
				[130,97,78,91],
				[104,97,48,78,99,36],
				[116,160,91,119,86,29,81,107,6,103,96,78],
				[106,28,159,132],
				[11,58,123,159,36],
				[55,44,153,56],
				[115,126,15,128,7,99,160,81,91,159,36,113,96],
				[117,46,52,123],
				[118,88,108],
				[27,75,103,92,22,113,91,73,153],
				[140,126,61,128,7,99,138,91],
				[10,46,52,59,157,60,96,92,99,78,71],
				[54,99,153],
				[158,75,103,153,78,22,113,91,26,123],
				[51,97,120,152,58,99,96,36],
				[2,78,71,22,96,99],
				[134,96,78],
				[137,79,16,141,129,161,97,22],
				[122,28,159,132],
				[144,88,159,132],
				[125,75,97,153,123,91,22],
				[146,155,97,16,129,161],
				[23,83,97,159,132,108,36,99,96,26],
				[110,103,78,113]
			],
		2:  [ 
				[156,75,103],
				[64],
				[130],
				[95,132,159,71,157,53],
				[11],
				[55,56],
				[147,103,72],
				[112,48,72],
				[115,126,98,31],
				[41,100,22,127],
				[154],
				[117,14,53,91],
				[118,88,108,58,36],
				[27,75],
				[140,126,8],
				[12,100,76],
				[10,99,157,78],
				[158,75,153,103],
				[47],
				[51,48],
				[137,72,141,16],
				[90],
				[144,88,159,132],
				[125,75,153,56],
				[146,72,16],
				[57,81],
				[23,108,132,159,36,96,99],
				[69,91,150],
				[110,22,72]
			],
		3:  [
				[156,75,97,123,58,91,92,121,113,129],
				[64,17,159,132,103],
				[130,45,15,128,161,74,78],
				[104,161,48,74,78],
				[24,123,14,91,58,113,121],
				[116,15,128,96,78,99],
				[43,124,103,98,8,127,99],
				[106,159,132,14,103,58,123,129],
				[11,153,46,78,132,159,36,91],
				[55,44,56],
				[147,52,59,157,129,103],
				[112,52,46,129,48],
				[115,126,71,127,98],
				[41,39,7,160,99],
				[154,65,162,77,66,141,84],
				[117,52,46,91,53,123,129],
				[118,88,58,108],
				[27,75,153,92,103,5,113],
				[140,126,153,8],
				[12,39,7,160,99,81],
				[10,60,141,159,161,99,96,157,160,121],
				[68,124],
				[21,52,59,157,18,78,113,74],
				[32,124,135,80],
				[158,75,153,92,103,98,8,160],
				[47,124,13,102,14,8],
				[51,124,45,78,74,48,97,127],
				[2,15,128,78,74,96],
				[137,52,153,97,16,141,103,161,129],
				[122,159,132,161,53,71,48,78,157],
				[90,161,74,36],
				[144,88,132,159],
				[125,75,97,153,14],
				[146,52,50,153,97,16,141,161,129],
				[23,52,97,132,159,99,36,96,127,76],
				[40,96],
				[69,39,153,91,160,78,5,150],
				[110,129,22]
			],
		4:  [
				[89,121],
				[156,75,123],
				[104,78,91,14],
				[11,52,46,45,14],
				[85,91,121,96,99],
				[112,46,52,48],
				[115,126],
				[117,53,14],
				[118,88,132],
				[27,75,153,60],
				[140,126],
				[10,52,131,121,71,99],
				[21,52,19,131,18,103,59,81,60,1,127],
				[158,75,103,153,60],
				[47,13,131,102,121],
				[51,97,128,136,133,52,48,123,60],
				[137,52,79,132],
				[90,48,97,123,36],
				[144,88,153],
				[125,75,14],
				[146,52,46,50,97,56,159],
				[9,121],
				[23,52,83,16,96,99],
				[69,153,133,121],
				[110,121]
			],
		5:	[
				[156,75,92],
				[104,48],
				[116,96,78,99],
				[11,36,105],
				[55,44,56],
				[33,153,48],
				[115,151],
				[117,93,123],
				[118,88,108],
				[27,75,153,92],
				[140,151],
				[10,99],
				[148,63],
				[158,75,92,153,103],
				[4,126],
				[137],
				[70,63,97],
				[144,88],
				[125,75,153,97],
				[146],
				[149,126],
				[23,96,99,36,159,132]	
			],

		6:  [
				[156,75,121,91,127,22,76],
				[104],
				[11,132],
				[115,15,128,99,138,7,127,91,78,121],
				[117,46,52,123,30],
				[42,91],
				[118,88,123,132],
				[27,75,153,91],
				[140,7,15,128,81,138,121,78,91],
				[21,52,139,59,99,37,78,91,22,76],
				[114,121],
				[87,48],
				[158,75,153,121,91],
				[51,15,128,48,45,121,52,96,121,99,36,78,76,22,132,49],
				[125,75,153,14,91],
				[146,97,38,67,153,91,56],
				[23,132,127],
				[69,99,160,34,91,150,153,78,22]
			],
		7:  [
				[156,75,123,91,14,113,121,74],
				[64,46],
				[130],
				[104,48,74],
				[24],
				[43,50,99,60,127],
				[106,129,159,132],
				[11,67,153,36],
				[55,44,153],
				[147,52,59,139,129],
				[85,113,160,81,91,74],
				[112,52,46,48,129],
				[115,126,98],
				[41,39,160],
				[154,3,25,143,62,159,132,141,131],
				[82,96,127],
				[117,52,46,53,129,123],
				[118,88,108,58],
				[27,75,153,91,103,60,81,109,99,78],
				[140,126,8],
				[12,39,160,81],
				[10,157,71,60,121,153],
				[21,52,59,157,18,101,98,127,74],
				[158,75,60,91,81,160,153,103,127],
				[47,13,102,14,20,99,60,96],
				[51,50,99,36,96,78,97,60,127],
				[2,15,128,7,78,74],
				[137,79,16,141],
				[122,161,53,71,157],
				[90,74],
				[144,88],
				[125,75,58,91,97,14,153],
				[146,67,50,141],
				[23,83,159,108,132,97,36,99,103,96],
				[69,3,25,143,62,131,99,153,81,109,160,150],
				[110,94,145,129,121]
			],
		8:  [
				[156,75,123,91],
				[64,17],
				[130,128,136],
				[104,78,48],
				[43,50,91,81,71,6,96,99],
				[106,28],
				[11,52,91],
				[55,161,129],
				[115,126,35,127],
				[154,3,25,143,62],
				[82,71,81],
				[117,52,46,142,123],
				[118,88,58],
				[27,75,153,81,160],
				[140,126,35,160],
				[10,52,157,71,121],
				[21,71,52,59,157,60,127,78],
				[158,75,160,153],
				[47,13,102,14,96],
				[51,48,71,50,78,97,48],
				[137,79,141,129,161],
				[122,28],
				[144,88],
				[125,75,153],
				[146,111,50,159,161,129],
				[23,52,132,108],
				[69,109,150,91]
			]
	};

	$scope.modelNames = [1,2,3,4,5,6,7,8];

	var positions = {
		1: {pos: 0, selected: -1},
		2: {pos: 0, selected: -1},
		3: {pos: 0, selected: -1},
		4: {pos: 0, selected: -1},
		5: {pos: 0, selected: -1},
		6: {pos: 0, selected: -1},
		7: {pos: 0, selected: -1},
		8: {pos: 0, selected: -1}
	};

	$scope.numLoaded = 0;
	var images = [];
	var cur = {
		model: null, 
		pos: null
	};
	var commonProps = [];

	$scope.bacteria = [];

	for (var i = 1; i <= 162; i ++) {
		var img = new Image();
		img.onload = function() {
			$scope.numLoaded++;
			if ($scope.numLoaded == 162) {
				start();
			}
		};
		img.src = 'https://chrchung.github.io/Creatures/' + i + '.png';
		images.push(img);
	}

    function getCommonProps(model, a) {
    	var common = [];
    	for (key in positions) {
    		if (model != key && positions[key].selected != -1) {
    			for (var i = 0; i < a.length; i ++) {
		    		if (isInList(models[key][positions[key].selected], a[i])) {
		    			common.push(a[i]);
		    		}
    			}
    		}	
    	}

    	// for (var i = 0; i < a.length; i ++) {
		   //  if (isInList(models[cur.model][cur.pos], a[i])) {
		   //  	common.push(a[i]);
		   //  }
    	// }

    	return common;
    }

    function isInList(a, b) {
    	for (var i = 0; i < a.length; i ++) {
    		if (a[i] == b) {
    			return true;
    		}
     	}
     	return false;
    }

    $scope.getNext = function (model, dir) {
    	if (dir == '-') {
    		if (positions[model].pos <= 0) {
    			return;
    		}
    		positions[model].pos--;
    		var pos = positions[model].pos;
    	} else if (dir == '+') {
    		if (positions[model].pos >= models[model].length - 1) {
    			return;
    		}
    		positions[model].pos++;
    		var pos = positions[model].pos;
    	} else {
	    	var pos = positions[model].pos;
    	}
	    var props = models[model][pos % models[model].length]
    	draw(props, true, document.getElementById('model_' + model), model);
    	$scope.select(model, true);
    }

    function start() {
    	seed();

    	for (var i = 1; i <= 8; i++) {
    		$scope.getNext(i, '0');
    	}
    }

	function getRandomInt(min, max) {
	    return Math.floor(Math.random() * (max - min + 1)) + min;
	}

	function addCommonProps(p) {
		commonProps = commonProps.concat(p);
	}

    function seed() {
    	var model = getRandomInt(1, 8);
    	var pos = getRandomInt(0, models[model].length - 1);
    	// cur.model = model;
    	// cur.pos = pos;
    	positions[model].pos = pos;
    	$scope.select(model, false);
    }

    function draw(props, highlight, c, model) {
    	props.sort();
		// var c = document.createElement('canvas');
		var con = c.getContext('2d');
   		// document.body.appendChild(c);
		    c.height = 60;
		    c.width = 60 * props.length;

		    var common = getCommonProps(model, props);

		    for (var i = 0; i < props.length; i ++) {
		    	if (highlight && isInList(common, props[i])) {
					con.rect(i*60, 0, 60, 60);
					con.fillStyle = "yellow";
		    	}
		    }
		    con.fill();	
			for (var i = 0; i < props.length; i ++) {
			 	con.drawImage(images[props[i] - 1], i*60, 0);
			}
    }

    function redraw() {
    	for (var i = 1; i <= 8; i++) {
    		$scope.getNext(i, '0');
    	}
    }

	function hasClass(element, cls) {
	    return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
	}

    $scope.select = function (model, update) {
    	if (!update && positions[model].pos == positions[model].selected) {
    		positions[model].selected = -1;
    		$('#model_' + model).removeClass('selected');
    	} else if (update && positions[model].pos != positions[model].selected) {
    		$('#model_' + model).removeClass('selected');
    	} else if (update && positions[model].pos == positions[model].selected) {
    		$('#model_' + model).addClass('selected');
    	} else if (!update) {
    		positions[model].selected = positions[model].pos;
    		$('#model_' + model).addClass('selected');
    	}

    	if (!update) {
    		redraw();
    	}
    };


});